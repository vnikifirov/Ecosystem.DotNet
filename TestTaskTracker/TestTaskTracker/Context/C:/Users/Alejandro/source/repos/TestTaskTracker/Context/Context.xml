<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Context</name>
    </assembly>
    <members>
        <member name="M:Context.DbContextBuilderExtensions.SetOptions(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Настроить контекст.
            </summary>
            <param name="optionsBuilder"><see cref="T:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder"/></param>
            <param name="configuration"><see cref="T:Microsoft.Extensions.Configuration.IConfiguration"/></param>
        </member>
        <member name="T:Context.Models.ProjectStatus">
            <summary>
            Project status
            </summary>
        </member>
        <member name="T:Context.Models.Project">
            <summary>
            Project
            </summary>
        </member>
        <member name="P:Context.Models.Project.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:Context.Models.Project.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:Context.Models.Project.Start">
            <summary>
            Start date
            </summary>
        </member>
        <member name="P:Context.Models.Project.Completion">
            <summary>
            Completion date
            </summary>
        </member>
        <member name="P:Context.Models.Project.Status">
            <summary>
            Status
            </summary>
        </member>
        <member name="P:Context.Models.Project.Tasks">
            <summary>
            Projects
            </summary>
        </member>
        <member name="P:Context.Models.Project.Priority">
            <summary>
            Priority
            </summary>
        </member>
        <member name="T:Context.Models.TaskStatus">
            <summary>
            Task status
            </summary>
        </member>
        <member name="T:Context.Models.Task">
            <summary>
            Task
            </summary>
        </member>
        <member name="P:Context.Models.Task.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:Context.Models.Task.Status">
            <summary>
            Status
            </summary>
        </member>
        <member name="P:Context.Models.Task.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:Context.Models.Task.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="P:Context.Models.Task.Project">
            <summary>
            Project
            </summary>
        </member>
        <member name="P:Context.Models.Task.Id_Project">
            <summary>
            Id_Project
            </summary>
        </member>
        <member name="P:Context.Models.Task.Priority">
            <summary>
            Priority
            </summary>
        </member>
        <member name="T:Context.Repository.Implementations.ProjectRepository">
            <inheritdoc/>
        </member>
        <member name="M:Context.Repository.Implementations.ProjectRepository.#ctor(System.Func{Context.TasksContext})">
            <inheritdoc/>
        </member>
        <member name="M:Context.Repository.Implementations.ProjectRepository.AddProjectAsync(Context.Models.Project,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Context.Repository.Implementations.ProjectRepository.AddProjectsAsync(System.Collections.Generic.IEnumerable{Context.Models.Project},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Context.Repository.Implementations.ProjectRepository.GetProjectByIdAsync(System.Int64,System.Threading.CancellationToken,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Context.Repository.Implementations.ProjectRepository.GetProjectsAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Context.Repository.Implementations.ProjectRepository.RemoveProjectAsync(Context.Models.Project,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Context.Repository.Implementations.ProjectRepository.UpdateProjectAsync(Context.Models.Project,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Context.Repository.Implementations.TaskRepository">
            <inheritdoc/>
        </member>
        <member name="M:Context.Repository.Implementations.TaskRepository.#ctor(System.Func{Context.TasksContext})">
            <inheritdoc/>
        </member>
        <member name="M:Context.Repository.Implementations.TaskRepository.AddTaskAsync(Context.Models.Task,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Context.Repository.Implementations.TaskRepository.AddTasksAsync(System.Collections.Generic.IEnumerable{Context.Models.Task},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Context.Repository.Implementations.TaskRepository.GetTaskByIdAsync(System.Int64,System.Threading.CancellationToken,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Context.Repository.Implementations.TaskRepository.GetTasksAsync(System.Threading.CancellationToken,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Context.Repository.Implementations.TaskRepository.RemoveTaskAsync(Context.Models.Task,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Context.Repository.Implementations.TaskRepository.UpdateTaskAsync(Context.Models.Task,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Context.Repository.Interfaces.IProjectRepository">
            <summary>
            Projects Data Layer
            </summary>
        </member>
        <member name="M:Context.Repository.Interfaces.IProjectRepository.GetProjectsAsync(System.Threading.CancellationToken)">
            <summary>
            Get All Projects
            </summary>
            <returns><see cref="T:System.Collections.Generic.ICollection`1"/></returns>
        </member>
        <member name="M:Context.Repository.Interfaces.IProjectRepository.GetProjectByIdAsync(System.Int64,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Get Project By Id
            </summary>
            <param name="id">Id of Project</param>
            <returns><see cref="T:Context.Models.Project"/></returns>
        </member>
        <member name="M:Context.Repository.Interfaces.IProjectRepository.AddProjectAsync(Context.Models.Project,System.Threading.CancellationToken)">
            <summary>
            Insert new Project into DataBase 
            </summary>
            <param name="project">Project</param>
        </member>
        <member name="M:Context.Repository.Interfaces.IProjectRepository.AddProjectsAsync(System.Collections.Generic.IEnumerable{Context.Models.Project},System.Threading.CancellationToken)">
            <summary>
            Insert new Project into DataBase 
            </summary>
            <param name="projects">Project</param>
        </member>
        <member name="M:Context.Repository.Interfaces.IProjectRepository.UpdateProjectAsync(Context.Models.Project,System.Threading.CancellationToken)">
            <summary>
            Update existing Project in DataBase 
            </summary>
            <param name="project">Project</param>
        </member>
        <member name="M:Context.Repository.Interfaces.IProjectRepository.RemoveProjectAsync(Context.Models.Project,System.Threading.CancellationToken)">
            <summary>
            Remove existing Project from DataBase 
            </summary>
            <param name="project">Project</param>
        </member>
        <member name="T:Context.Repository.Interfaces.ITaskRepository">
            <summary>
            Tasks Data Layer
            </summary>
        </member>
        <member name="M:Context.Repository.Interfaces.ITaskRepository.GetTasksAsync(System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Get All Tasks
            </summary>
            <param name="includeRelated"></param>
            <param name="cancellationToken"></param>
            <returns><see cref="T:System.Collections.Generic.ICollection`1"/></returns>
        </member>
        <member name="M:Context.Repository.Interfaces.ITaskRepository.GetTaskByIdAsync(System.Int64,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Get Task By Id
            </summary>
            <param name="id">Id of Task</param>
            <param name="includeRelated"></param>
            <param name="cancellationToken"></param>
            <returns><see cref="T:Context.Models.Task"/></returns>
        </member>
        <member name="M:Context.Repository.Interfaces.ITaskRepository.AddTaskAsync(Context.Models.Task,System.Threading.CancellationToken)">
            <summary>
            Insert new Task into DataBase 
            </summary>
            <param name="task">Task</param>
        </member>
        <member name="M:Context.Repository.Interfaces.ITaskRepository.AddTasksAsync(System.Collections.Generic.IEnumerable{Context.Models.Task},System.Threading.CancellationToken)">
            <summary>
            Insert new Tasks into DataBase 
            </summary>
            <param name="tasks">Task</param>
        </member>
        <member name="M:Context.Repository.Interfaces.ITaskRepository.UpdateTaskAsync(Context.Models.Task,System.Threading.CancellationToken)">
            <summary>
            Update existing Task in DataBase 
            </summary>
            <param name="task">Task</param>
        </member>
        <member name="M:Context.Repository.Interfaces.ITaskRepository.RemoveTaskAsync(Context.Models.Task,System.Threading.CancellationToken)">
            <summary>
            Remove existing Task from DataBase 
            </summary>
            <param name="task">Task</param>
        </member>
    </members>
</doc>
